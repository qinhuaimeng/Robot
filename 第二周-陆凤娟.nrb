<?xml version="1.0" encoding="gb2312"?>
<File robottype="NST-STM-YD" filetype="4" ver="1.0.0" author=""><PortConfig id=" value="></PortConfig><Data>#include "main.h"

#define g_I_F_Left_0 EXP_analog(0,KZ[1][7])        /*前8个灰度传感器*/
#define g_I_F_Left_1 EXP_analog(0,KZ[1][6])
#define g_I_F_Left_2 EXP_analog(0,KZ[1][5])
#define g_I_F_Left_3 EXP_analog(0,KZ[1][4])
#define g_I_F_Left_4 EXP_analog(0,KZ[1][3])
#define g_I_F_Left_5 EXP_analog(0,KZ[1][2])
#define g_I_F_Left_6 EXP_analog(0,KZ[1][1])
#define g_I_F_Left_7 EXP_analog(0,KZ[1][0])

#define g_I_B_Left_0 EXP_analog(1,KZ[1][0])        /*后8个灰度传感器*/
#define g_I_B_Left_1 EXP_analog(1,KZ[1][1])
#define g_I_B_Left_2 EXP_analog(1,KZ[1][2])
#define g_I_B_Left_3 EXP_analog(1,KZ[1][3])
#define g_I_B_Left_4 EXP_analog(1,KZ[1][4])
#define g_I_B_Left_5 EXP_analog(1,KZ[1][5])
#define g_I_B_Left_6 EXP_analog(1,KZ[1][6])
#define g_I_B_Left_7 EXP_analog(1,KZ[1][7])

#define g_I_AIL_M_Left    analog(3)                /*中间两个灰度传感器*/
#define g_I_AIL_M_Right   analog(6)                //3，6为接口名字。

#define g_I_F_IRA_0 digital(1)               //距离传感器（只有0和1，1代表信号亮，0代表不亮。）的四个接口左一右二，从上到下。
#define g_I_B_IRA_0 digital(2)


int a=1000;
int b=1000;

void move(int g_I_L,int g_I_R)                  //左右马达的定义
{
	motor(0,g_I_R);
	motor(1,g_I_L);
}

 void xunxian(int s){                            //一般巡线
	while(g_I_F_Left_0&lt;a&amp;&amp;g_I_F_Left_7&lt;a)
	{
			if(g_I_F_Left_3&gt;a&amp;&amp;g_I_F_Left_4&gt;a)                         //中间传感器定位
			move(s,s);
			else if(g_I_F_Left_3&gt;a&amp;&amp;g_I_F_Left_4&lt;a)
			move(s,s+5);                           //不同传感器检测到，左右轮给的速度不一样
			else if(g_I_F_Left_3&lt;a&amp;&amp;g_I_F_Left_4&gt;a)
			move(s+5,s);
			else if(g_I_F_Left_2&gt;a&amp;&amp;g_I_F_Left_5&lt;a)
			move(s,s+10);
			else if(g_I_F_Left_2&lt;a&amp;&amp;g_I_F_Left_5&gt;a)
			move(s+10,s);
			else if(g_I_F_Left_1&gt;a&amp;&amp;g_I_F_Left_6&lt;a)
			move(s,s+15);
			else if(g_I_F_Left_1&lt;a&amp;&amp;g_I_F_Left_6&gt;a)
			move(s+15,s);
			else move(s,s);
		}
}

void dingwei(int s){                      //中间传感器的定位
   while(g_I_AIL_M_Left&lt;a&amp;&amp;g_I_AIL_M_Right&gt;a)
			{
				move(s,s);
			}
}
void houdingwei(int s){                   // 一般后定位，后排传感器的定位
	while(g_I_AIL_M_Left&lt;a&amp;&amp;g_I_AIL_M_Right&gt;a)
			{
				move(-s,-s);
			}
}

void turn_left(int s){                   //左转
    int y=0;
	move(-s,s);
	sleep(0.05);
	while(1){
	    if(g_I_F_Left_0&gt;a)
		   break;
	    else
	       move(-s,s);
	    if(g_I_B_Left_4&gt;b){
           y=1;
		}
	}
	move(0,0);
	sleep(0.1);
	while(1){
	    if(g_I_F_Left_4&gt;a)
		   break;
		else
		   move(-s,s);
		if(g_I_B_Left_3&gt;b){
		   y=1;
		}
	}
	move(0,0);
	sleep(0.1);
	if(y==0){
		while(g_I_B_Left_3&lt;b){
			move(-s,s);
		}
	move(0,0);
	sleep(0.1);
}
} 
void turn_right(int s){ //右转
    int y=0; 
	move(s,-s); 
	sleep(0.05); 
	while(1){ 
	    if(g_I_F_Left_7&gt;a)
		   break;
	    else	
	       move(s,-s); 
	    if(g_I_B_Left_3&gt;b){
           y=1; 
		}
	}
	move(0,0);
	sleep(0.1);
	while(1){
	    if(g_I_F_Left_3&gt;a)
		   break;
		else
		   move(s,-s);
		if(g_I_B_Left_3&gt;b){
		   y=1;
		}
	}
	move(0,0);
	sleep(0.1); 
	if(y==0){
		while(g_I_B_Left_3&lt;b){
			move(s,-s); 
		}
	move(0,0);
	sleep(0.1);		
		}
	} 

void zuohouzhuan(int s){                  //左后转
	while(g_I_B_Left_0&lt;b) move(s+3,-s);               // 判断后排最左侧传感器
	while(g_I_B_Left_3&lt;b) move(s+3,-s);               //判断后排中间传感器
}

void youhouzhuan(int s){                    //右后转
	while(g_I_B_Left_7&lt;b) move(-s,s+3);                  // 判断后排最右侧传感器
	while(g_I_B_Left_4&lt;b) move(-s,s+3);                    //判断后排中间传感器
}

void houxunxian(int s){                      //后巡线
while(g_I_B_Left_0&lt;b&amp;&amp;g_I_B_Left_7&lt;b)
	{
		if(g_I_B_Left_3&gt;b&amp;&amp;g_I_B_Left_4&lt;b) move(-(s+10),-s);
		else if(g_I_B_Left_4&gt;b&amp;&amp;g_I_B_Left_3&lt;b) move(-s,-(s+10));
		else if(g_I_B_Left_2&gt;b&amp;&amp;g_I_B_Left_5&lt;b) move(-(s+15),-s);
		else if(g_I_B_Left_5&gt;b&amp;&amp;g_I_B_Left_2&lt;b) move(-s,-(s+15));
		else if(g_I_B_Left_1&gt;b&amp;&amp;g_I_B_Left_6&lt;b) move(-(s+20),-s);
		else if(g_I_B_Left_6&gt;b&amp;&amp;g_I_B_Left_1&lt;b) move(-s,-(s+20));
		else if(g_I_B_Left_3&gt;b&amp;&amp;g_I_B_Left_4&lt;b) move(-s,-s);
		else move(-s,-s);
		}
}

void qianjin(int s){                //用于盲区
	while(g_I_F_Left_0&lt;a&amp;&amp;g_I_F_Left_7&lt;a){
	move(s,s);
	}
}
void houtui(int s){                  //用于盲区
	while(g_I_B_Left_0&lt;b&amp;&amp;g_I_B_Left_7&lt;b){
	move(-s,-s);
	}
}

task1(){
	dingwei(15);
	xunxian(15);
	/*dingwei(15);
	turn_left(18);
	xunxian(15);
	dingwei(15);
	turn_right(18); 
	xunxian(5);
	qianjin(15);
	houtui(15);
	houxunxian(5);
	houdingwei(5);
	zuohouzhuan(12);
	xunxian(15);
	dingwei(15);
	xunxian(15);
	dingwei(15);
	
	turn_left(18);
	xunxian(5);
	qianjin(15);
	houtui(15);
	houxunxian(5);
	houdingwei(5);
	youhouzhuan(12);
	xunxian(15);
	dingwei(15);
	turn_left(15);
	xunxian(15);
	dingwei(15);
	move(15,15);
	sleep(0.8);//*/ 
	}
int main()
{
    RobotInit();     /*该函数用于机器人初始化，请勿删除!*/
	task1(); 
}
</Data></File>
